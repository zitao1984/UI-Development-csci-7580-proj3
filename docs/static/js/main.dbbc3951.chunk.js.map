{"version":3,"sources":["data/data.js","components/Settings.js","components/loading.js","components/TriviaAnswer.js","components/Trivia.js","components/TriviaBlock.js","views/App.js","reportWebVitals.js","index.js"],"names":["categories","difficulty","Settings","props","className","htmlFor","id","value","category","onChange","e","updateParams","target","amount","map","index","name","choice","type","min","max","step","Loading","role","TriviaAnswer","useState","userChoice","updateUserChoice","canSubmit","triviaChoice","checked","txt","DOMParser","parseFromString","body","innerText","disabled","onClick","view","agreeCheck","color","Trivia","agree","updateAgree","userAnswer","updateUserAnswer","parseEntities","questionChoice","JSON","parse","stringify","trivia","answer","push","a","i","length","j","Math","floor","random","temp","shuffleArray","question","answerView","triviaNext","viewChange","userOption","agreeListUpdate","TriviaBlock","currentTriviaIndex","triviaSelected","updateAnswerView","agreeTotal","updateAgreeTotal","startFunction","setStatus","response_code","results","icon","faSadTear","faGrinBeamSweat","faGrinStars","STATUS","requestActivity","userParams","url","createQueryString","fetch","response","json","activityData","params","p","join","App","status","setParams","activity","setActivity","initialView","updateInitialView","useEffect","then","data","catch","error","console","log","faLightbulb","faDog","triviaNumber","faWifi","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbbc3951.chunk.js","sourcesContent":["export const categories = [\n    {\n        \"id\": 9,\n        \"name\": \"General Knowledge\"\n    },\n    {\n        \"id\": 10,\n        \"name\": \"Entertainment: Books\"\n    },\n    {\n        \"id\": 11,\n        \"name\": \"Entertainment: Film\"\n    },\n    {\n        \"id\": 12,\n        \"name\": \"Entertainment: Music\"\n    },\n    {\n        \"id\": 13,\n        \"name\": \"Entertainment: Musicals & Theatres\"\n    },\n    {\n        \"id\": 14,\n        \"name\": \"Entertainment: Television\"\n    },\n    {\n        \"id\": 15,\n        \"name\": \"Entertainment: Video Games\"\n    },\n    {\n        \"id\": 16,\n        \"name\": \"Entertainment: Board Games\"\n    },\n    {\n        \"id\": 17,\n        \"name\": \"Science & Nature\"\n    },\n    {\n        \"id\": 18,\n        \"name\": \"Science: Computers\"\n    },\n    {\n        \"id\": 19,\n        \"name\": \"Science: Mathematics\"\n    },\n    {\n        \"id\": 20,\n        \"name\": \"Mythology\"\n    },\n    {\n        \"id\": 21,\n        \"name\": \"Sports\"\n    },\n    {\n        \"id\": 22,\n        \"name\": \"Geography\"\n    },\n    {\n        \"id\": 23,\n        \"name\": \"History\"\n    },\n    {\n        \"id\": 24,\n        \"name\": \"Politics\"\n    },\n    {\n        \"id\": 25,\n        \"name\": \"Art\"\n    },\n    {\n        \"id\": 26,\n        \"name\": \"Celebrities\"\n    },\n    {\n        \"id\": 27,\n        \"name\": \"Animals\"\n    },\n    {\n        \"id\": 28,\n        \"name\": \"Vehicles\"\n    },\n    {\n        \"id\": 29,\n        \"name\": \"Entertainment: Comics\"\n    },\n    {\n        \"id\": 30,\n        \"name\": \"Science: Gadgets\"\n    },\n    {\n        \"id\": 31,\n        \"name\": \"Entertainment: Japanese Anime & Manga\"\n    },\n    {\n        \"id\": 32,\n        \"name\": \"Entertainment: Cartoon & Animations\"\n    }\n]\n\n\n\nexport const difficulty=[\n    \"any\",\n    \"easy\",\n    \"medium\",\n    \"hard\"\n]\n","import {categories,difficulty} from \"../data/data\";\n\nconst Settings = props => {\n\n    return (\n        <form>\n            <div className=\"row my-4\">\n                        <label className=\"col-sm-5 col-md-3 col-form-label my-label\" htmlFor=\"category\">Category </label>\n                        <div className=\"col-sm-7 col-md-9\">\n                            <select className=\"form-select\" id=\"category\" value={props.category}\n                                    onChange={e => props.updateParams({\n                                        category: e.target.value,\n                                        amount: props.amount,\n                                        difficulty: props.difficulty\n                                    })}>\n                                <option value=\"any\">any</option>\n                                {\n                                    categories.map((category, index) =>\n                                        <option value={category.id}>{category.name}</option>\n                                    )\n                                }\n\n                            </select>\n                        </div>\n                    </div>\n\n                    <div className=\"row my-4\">\n                        <label className=\"col-sm-5 col-md-3  col-form-label my-label \" htmlFor=\"difficulty\"><small>Difficulty</small></label>\n                        <div className=\"col-sm-7 col-md-9\">\n                        <select className=\"form-select\" id=\"difficulty\" value={props.difficulty}\n                                onChange={e => props.updateParams({\n                                    category: props.category,\n                                    amount: props.amount,\n                                    difficulty: e.target.value\n                                })}>\n                            {\n                                difficulty.map((choice, index) =>\n                                    <option value={choice}>{choice}</option>\n                                )\n                            }\n\n                        </select>\n                    </div>\n                </div>\n\n            <div className=\"row my-4\">\n                    <label className=\"col-sm-5 col-md-3 my-label col-form-label\" htmlFor=\"numbers\"><small>Number of Questions </small></label>\n                <div className=\"col-sm-7 col-md-9\">      \n                <input type=\"number\" id=\"numbers\" min=\"1\" max=\"50\" step=\"0\" value={props.amount}\n                           onChange={e => props.updateParams({\n                               category: props.category,\n                               amount: e.target.value,\n                               difficulty: props.difficulty\n                           })}/>\n\n                </div>\n            </div>\n        </form>\n\n    )\n}\n\nexport default Settings;","const Loading = () =>\n    <div className=\"loading\">\n        <div className=\"spinner-border spinner-border-xl text-info\" role=\"status\"/>\n        <p>Searching... please hold</p>\n    </div>\n\nexport default Loading;","import {useState} from \"react\";\n\nconst TriviaAnswer = props =>{\n    const [userChoice,updateUserChoice]=useState({\n            choice: \"\"\n        }\n    )\n\n    const parseEntities = txt => new DOMParser().parseFromString(txt, 'text/html').body.innerText;\n\n    const onUserChoiceChange = event => {\n        updateUserChoice({\n            choice: event.target.id,\n        })\n\n    }\n\n    const canSubmit=()=>{\n        return (userChoice.choice !== \"\" );\n    }\n\n    const callBack=()=>{\n        props.view();\n        props.agreeCheck(userChoice.choice);\n        updateUserChoice({\n            choice:\"\"})\n    }\n\n\n    return(\n        <div>\n            {\n               props.triviaChoice.map ((choice,index)=>\n\n                   (\n                       <div className=\"row my-2 \">\n                               <input type=\"radio\" className=\"btn-check\" name=\"options-outlined\" id={choice}\n                                      checked={userChoice.choice===choice}\n                                      onChange={e => onUserChoiceChange(e)}\n                               />\n                               <label className=\"btn btn-outline-success\" htmlFor={choice}>{parseEntities(choice)}</label>\n                        </div>\n\n                   )\n\n               )\n\n            }\n            <div className=\"row my-2\">\n                <div className=\"col text-end\">\n                    <button className=\"btn btn-primary\" type=\"submit\" disabled={!canSubmit()} onClick={()=>callBack()} color={canSubmit? \"primary\" : \"secondary\"}>Submit</button>\n                </div>\n            </div>\n\n        </div>\n        )\n\n}\n\nexport default TriviaAnswer","import TriviaAnswer from \"./TriviaAnswer\";\nimport {useState} from \"react\";\n\nconst Trivia = props=> {\n\n    const[agree, updateAgree]=useState(false)\n    const[userAnswer, updateUserAnswer]=useState(\"\")\n\n    const parseEntities = txt => new DOMParser().parseFromString(txt, 'text/html').body.innerText;\n\n    const agreeCheck= userOption=>{\n        if (userOption===props.trivia[\"correct_answer\"]){\n           updateAgree(true);\n            props.agreeListUpdate();\n        }\n        else {\n            updateAgree(false);\n            updateUserAnswer(userOption)\n        }\n\n    }\n\n    const shuffleArray = a =>{\n        for (var i = a.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n        }\n        return a;\n    }\n\n    let questionChoice =  JSON.parse(JSON.stringify(props.trivia[\"incorrect_answers\"]));\n    let answer = props.trivia[\"correct_answer\"];\n    questionChoice.push(answer);\n    questionChoice = shuffleArray(questionChoice);\n\n\n\n    return (\n        <div className=\"card border-success mb-3 border-2 rounded-2\" >\n            <div className=\"card-header \">\n                <h4>Difficulty: <span className=\"text\">{props.trivia.difficulty}</span></h4>\n                <h4 >Category: <span className=\"text\">{props.trivia.category}</span></h4>\n            </div>\n            <div  className=\"card-body text-dark\">\n                <h3 className=\"card-title myTitle\">{parseEntities(props.trivia.question)}</h3>\n\n            {\n                props.answerView?\n\n                    (<div >\n                            {\n                            agree?\n                                <h4 className=\"card-text text-success response\">Congratulation, you are correct!</h4>:\n                                (\n                                    <div>\n                                        <h4 className=\"card-text text-danger response\">The choice: {userAnswer} is incorrect</h4>\n                                        <h4 className=\"card-text text-success response\">The correct choice is : {parseEntities(answer)}</h4>\n                                    </div>\n                                )\n                            }\n\n                                    <div className=\"row my-2\">\n                                        <div className=\"col text-end\">\n                                            <button className=\"btn btn-primary\" type=\"submit\" onClick={() =>props.triviaNext()} >Next</button>\n                                        </div>\n                                    </div>\n                                </div>\n\n                )\n                    :\n                    <TriviaAnswer triviaChoice={questionChoice}  answer={answer} view={()=>props.viewChange()} agreeCheck={(userOption)=>agreeCheck(userOption)}/>\n\n            }\n            </div>\n\n        </div>\n    )\n\n\n}\nexport default Trivia","import {useState} from 'react';\nimport Trivia from \"./Trivia\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSadTear,faGrinStars,faGrinBeamSweat} from \"@fortawesome/free-solid-svg-icons\";\n\n\n\nconst TriviaBlock = props =>{\n    const [currentTriviaIndex, triviaSelected] = useState(0);\n    const [answerView,updateAnswerView]=useState(false)\n    const [agreeTotal,updateAgreeTotal]=useState(0)\n\n\n    // chang to answer mode after submit\n    const viewChange=()=>{\n        updateAnswerView(true)\n    }\n\n    //check if the selected answer is same as the corrected answer\n    const agreeListUpdate=()=>{\n        updateAgreeTotal(agreeTotal+1)\n    }\n\n    // Move to next trivia\n    const triviaNext=()=>{\n        if(currentTriviaIndex<props.results.length){\n            updateAnswerView(false)\n            triviaSelected(currentTriviaIndex+1)\n        }\n    }\n\n    const startFunction=()=>{\n        props.setStatus()\n    }\n\n    if (props.response_code===0 && currentTriviaIndex<props.results.length)\n        return (\n            <div className=\"triviaCard\">\n                <h2>#{currentTriviaIndex+1}</h2>\n                <Trivia trivia={props.results[currentTriviaIndex]} triviaNext={()=>triviaNext()}\n                        answerView={answerView} viewChange={()=>viewChange()} agreeListUpdate={()=>agreeListUpdate()}/>\n\n            </div>\n        )\n\n    else if (props.response_code===1){\n        return (\n            <div className=\"triviaCard\">\n                <div>\n                    <div className=\"iconDefine\"><FontAwesomeIcon icon={faSadTear} /></div>\n                <p>\n                    Sorry, we don't have enough questions that match your criteria. Please\n                    change the category, difficulty or decrease the number of questions and try again.\n                </p>\n                </div>\n               <div className=\"d-grid gap-2\">\n                            <button type=\"button\" className=\"btn btn-primary mt-4\"\n                                    onClick={() => startFunction()}>\n                                Wanna try it again\n                            </button>\n                        </div>\n            </div>\n        )\n    }\n    else{\n        return(\n            <div className=\"triviaCard\">\n                <h2>Your results</h2>\n                <div id=\"resultSentence\">\n                    <p >Your final score is {agreeTotal} out of {props.results.length}</p>\n                    {\n                        agreeTotal<props.results.length/2?\n                            (<>\n                                <div className=\"iconDefine\"><FontAwesomeIcon icon={faGrinBeamSweat} /></div>\n                            <p>Don't be frustrated, you can do it!</p>\n                                </>):\n                            (<>\n                                <div className=\"iconDefine\"><FontAwesomeIcon icon={faGrinStars} /></div>\n                                <p>Awesome job!</p>\n                            </>)\n                    }\n                </div>\n                <div className=\"d-grid gap-2\">\n                            <button type=\"button\" className=\"btn btn-primary mt-4\"\n                                    onClick={() => startFunction()}>\n                                Wanna try it again\n                            </button>\n                        </div>\n            </div>\n\n        )\n    }\n\n}\nexport default TriviaBlock","import Settings from \"../components/Settings\";\nimport {useState, useEffect} from 'react';\nimport Loading from \"../components/loading\";\nimport TriviaBlock from \"../components/TriviaBlock\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faWifi, faLightbulb, faSadTear,faDog} from \"@fortawesome/free-solid-svg-icons\";\n\n\nconst STATUS = {\n    LOADING: \"loading\",\n    SUCCESS: \"success\",\n    FAIL: \"fail\"\n}\n\nconst requestActivity = async userParams => {\n    const BASE_URL = \"https://opentdb.com/api.php\"\n    let url = BASE_URL + createQueryString(userParams);\n    let response = await fetch(url);\n    let activityData = await response.json();\n    return activityData\n}\n\nconst createQueryString = userParams => {\n    let params = [];\n    for (let p in userParams) {\n        if (userParams[p] !== \"any\") {\n            params.push(p + \"=\" + userParams[p]);\n        }\n    }\n    return params.length === 0 ? \"\" : \"?\" + params.join(\"&\");\n}\n\nconst App = () =>{\n    const [status, setStatus] = useState(STATUS.LOADING);\n    const [params, setParams] = useState({\n        category: \"any\",\n        amount: \"2\",\n        difficulty:\"any\"\n    });\n    const [activity, setActivity] = useState(null);\n    // Set button for the first page\n    const [initialView,updateInitialView]=useState(true)\n\n\n    const clickStart =()=>{\n        setStatus(STATUS.LOADING)\n        updateInitialView(false)\n\n    }\n\n    useEffect(() => {\n        if (status === STATUS.LOADING) {\n            requestActivity(params).then(data => {\n                setStatus(STATUS.SUCCESS);\n                setActivity(data);\n            }).catch(error => {\n                setStatus(STATUS.FAIL);\n                console.log(error);\n            })\n        }\n    }, [status,params]);\n    console.log(activity)\n\n\n    return(\n        <div className=\"container\">\n            <div className=\"title\">\n                <h1>Zitao's Trivia App <FontAwesomeIcon icon={faLightbulb} /></h1>\n            </div>\n            <div className=\"row\">\n                <h2 className=\"subTitle\"><FontAwesomeIcon icon={faDog} />Questions will be ...</h2>\n                <Settings {...params} updateParams={setParams} />\n            </div>\n            {\n                initialView ?\n                    (<div className=\"d-grid gap-2\">\n                        <button type=\"button\" className=\"btn btn-primary mt-4\"\n                                onClick={() => clickStart()}>\n                            Let's start\n                        </button>\n                    </div>) : status === STATUS.LOADING ?\n                    <Loading />\n                        :\n                        <>\n                            {\n                                status === STATUS.SUCCESS ?\n                                    <TriviaBlock {...activity} triviaNumber={params.amount} setStatus={()=>setStatus(STATUS.LOADING)}/>\n                                    :\n                                    (\n                                        <div >\n                                            <div className=\"iconDefine\"><FontAwesomeIcon icon={faWifi} /></div>\n                                            <p >Something went wrong. Check your Wi-Fi connection, please try again.</p>\n                                        </div>\n                                    )\n                            }\n\n                        </>\n            }\n\n\n        </div>\n    )\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/styles.css';\nimport App from './views/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}